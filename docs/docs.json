{
  "openapi": "3.0.0",
  "info": {
    "title": "Personal Budget API",
    "description": "This is a simple API to manage a personal budget with the envelope method",
    "contact": {
      "email": "lezojeda@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/lezojeda/personal-budget/1.0.0",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "tags": [
    {
      "name": "envelopes",
      "description": "Envelope related operations"
    },
    {
      "name": "transactions",
      "description": "Transaction related operations"
    },
    {
      "name": "auth",
      "description": "Authentication related operations"
    },
    {
      "name": "users",
      "description": "User related operations"
    }
  ],
  "paths": {
    "/envelopes": {
      "get": {
        "tags": ["envelopes"],
        "summary": "Gets all the envelopes from the signed in user",
        "operationId": "getEnvelopes",
        "responses": {
          "200": {
            "description": "All envelopes belonging to the user signed in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Envelope"
                  }
                },
                "example": [
                  {
                    "id": 1,
                    "current_amount": "$500.00",
                    "envelope_limit": null,
                    "name": "Groceries",
                    "user_id": 1
                  },
                  {
                    "id": 2,
                    "current_amount": "$700.00",
                    "envelope_limit": "$900.50",
                    "name": "Gas",
                    "user_id": 1
                  },
                  {
                    "id": 1,
                    "current_amount": "$200.00",
                    "envelope_limit": "$300.10",
                    "name": "Caf√©",
                    "user_id": 1
                  }
                ]
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerError"
          }
        }
      },
      "post": {
        "tags": ["envelopes"],
        "summary": "Creates a new envelope",
        "description": "Creates a new envelope",
        "operationId": "createEnvelope",
        "requestBody": {
          "description": "Envelope to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "current_amount": {
                    "$ref": "#/components/schemas/Amount"
                  },
                  "envelope_limit": {
                    "type": "number",
                    "format": "float",
                    "example": "700.0"
                  },
                  "name": {
                    "type": "string",
                    "example": "Groceries"
                  }
                },
                "required": ["name"]
              }
            }
          },
          "required": "true"
        },
        "responses": {
          "201": {
            "description": "Envelope created successully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Envelope created successfully"
                    },
                    "envelope": {
                      "$ref": "#/components/schemas/Envelope"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/envelopes/{envelopeId}": {
      "get": {
        "tags": ["envelopes"],
        "summary": "Gets the envelope requested by id",
        "parameters": [
          {
            "in": "path",
            "name": "envelopeId",
            "schema": {
              "$ref": "#/components/parameters/envelopeId"
            }
          }
        ],
        "operationId": "getEnvelopeById",
        "responses": {
          "200": {
            "description": "The envelope requested",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Envelope"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbbiden"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerError"
          }
        }
      },
      "patch": {
        "tags": ["envelopes"],
        "summary": "Updates the envelope",
        "parameters": [
          {
            "in": "path",
            "name": "envelopeId",
            "schema": {
              "$ref": "#/components/parameters/envelopeId"
            }
          }
        ],
        "operationId": "updateEnvelopeById",
        "requestBody": {
          "description": "Properties to update the envelope with",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "envelope_limit": {
                    "type": "number",
                    "format": "float",
                    "example": "700.0"
                  },
                  "name": {
                    "type": "string",
                    "example": "Gas"
                  }
                }
              }
            }
          },
          "required": "true"
        },
        "responses": {
          "200": {
            "description": "The envelope with its updated properties",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Envelope"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbbiden"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerError"
          }
        }
      },
      "delete": {
        "tags": ["envelopes"],
        "summary": "Delete the envelope and all its associated transactions",
        "parameters": [
          {
            "in": "path",
            "name": "envelopeId",
            "schema": {
              "$ref": "#/components/parameters/envelopeId"
            }
          }
        ],
        "operationId": "deleteEnvelopeById",
        "responses": {
          "204": {
            "description": "The envelope was deleted succesfully"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbbiden"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/envelopes/{envelopeId}/transactions": {
      "post": {
        "tags": ["envelopes"],
        "summary": "Creates a transaction associated to an envelope",
        "description": "The amount used in the request body will be subtracted from the current_amount property of the envelope and a new transaction will be recorded in the transactions table.",
        "parameters": [
          {
            "in": "path",
            "name": "envelopeId",
            "schema": {
              "$ref": "#/components/parameters/envelopeId"
            }
          }
        ],
        "operationId": "createEnvelopeTransaction",
        "requestBody": {
          "description": "Must contain the amount to subtract from the envelope and assign to the new transaction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "format": "float",
                    "example": "100"
                  }
                },
                "required": ["amount"]
              }
            }
          },
          "required": "true"
        },
        "responses": {
          "201": {
            "description": "Transaction created successully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Transaction created successfully"
                    },
                    "envelope": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "schema": {
                            "$ref": "#/components/schemas/EntityId"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbbiden"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/envelopes/transfer": {
      "post": {
        "tags": ["envelopes"],
        "summary": "Transfter a certain amount from one envelope to another",
        "description": "The amount specified in the request body is subtracted from the current_amount of the envelope id specified in the query param 'from' and that same amount is added to the 'to' envelop",
        "operationId": "transferBudgets",
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "description": "The origin envelope to transfer money FROM",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "to",
            "description": "The destination envelope to transfer money TO",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Amount to transfer",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "format": "float",
                    "example": "100"
                  }
                },
                "required": ["amount"]
              }
            }
          },
          "required": "true"
        },
        "responses": {
          "200": {
            "description": "Envelopes affected by the budget transfer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Envelope"
                  }
                },
                "example": [
                  {
                    "id": 1,
                    "current_amount": "$500.00",
                    "envelope_limit": null,
                    "name": "Groceries",
                    "user_id": 1
                  },
                  {
                    "id": 2,
                    "current_amount": "$700.00",
                    "envelope_limit": "$900.50",
                    "name": "Gas",
                    "user_id": 1
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "tags": ["transactions"],
        "summary": "Gets all the transactions from the signed in user",
        "operationId": "getTransactions",
        "responses": {
          "200": {
            "description": "All transactions belonging to the user signed in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                },
                "example": [
                  {
                    "id": 1,
                    "amount": "$20.00",
                    "timestamp": "2023-02-09T23:15:38.000Z",
                    "envelope_id": 2
                  },
                  {
                    "id": 2,
                    "amount": "$20.00",
                    "timestamp": "2023-02-09T23:15:39.000Z",
                    "envelope_id": 2
                  }
                ]
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/transactions/{transactionId}": {
      "get": {
        "tags": ["transactions"],
        "summary": "Gets the transaction requested by id",
        "parameters": [
          {
            "in": "path",
            "name": "envelopeId",
            "schema": {
              "$ref": "#/components/parameters/envelopeId"
            }
          }
        ],
        "operationId": "getTransactionById",
        "responses": {
          "200": {
            "description": "The transaction requested",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbbiden"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerError"
          }
        }
      },
      "patch": {
        "tags": ["transactions"],
        "summary": "Updates the transaction",
        "description": "Note that the only thing that can be changed in a transaction at this time is the amount.",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "schema": {
              "$ref": "#/components/parameters/transactionId"
            }
          }
        ],
        "operationId": "updateTransactionById",
        "requestBody": {
          "description": "The amount to update the transaction with",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "$ref": "#/components/schemas/Amount"
                  }
                }
              }
            }
          },
          "required": "true"
        },
        "responses": {
          "200": {
            "description": "The transaction with its updated amount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbbiden"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerError"
          }
        }
      },
      "delete": {
        "tags": ["transactions"],
        "summary": "Delete the transaction",
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "schema": {
              "$ref": "#/components/parameters/transactionId"
            }
          }
        ],
        "operationId": "deleteTransactionById",
        "responses": {
          "204": {
            "description": "The envelope was deleted succesfully"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbbiden"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": ["auth"],
        "summary": "Sign in",
        "description": "Signs in the user and in a successful response, returns a cookie identifying the session created. Sessions last 9 hours.",
        "operationId": "signIn",
        "requestBody": {
          "description": "Username and password to sign in",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "johndoe"
                  },
                  "password": {
                    "type": "string",
                    "example": "p4ssw0rd"
                  }
                },
                "required": ["username", "password"]
              }
            }
          },
          "required": "true"
        },
        "responses": {
          "200": {
            "description": "Signed in successully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Signed in successully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "description": "There is some error in the username or/and in the password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "errors": [
                    {
                      "message": "Bad credentials"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": ["auth"],
        "summary": "Sign up",
        "description": "Creates a new user",
        "operationId": "signUp",
        "requestBody": {
          "description": "Username and password to sign up",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "johndoe"
                  },
                  "password": {
                    "type": "string",
                    "example": "p4ssw0rd"
                  }
                },
                "required": ["username", "password"]
              }
            }
          },
          "required": "true"
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User created successfully"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": "2"
                        },
                        "username": {
                          "type": "string",
                          "example": "johndoe"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/409409UsernameConflict"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/auth/signout": {
      "post": {
        "tags": ["auth"],
        "summary": "Sign out",
        "description": "Terminates the login session removing it from the database",
        "operationId": "signOut",
        "responses": {
          "204": {
            "description": "Signed out successfully"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerError"
          }
        }
      }
    },
    "/users": {
      "patch": {
        "tags": ["users"],
        "summary": "Updates the user signed in",
        "operationId": "updateUser",
        "requestBody": {
          "description": "Properties to update the user with",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "savings": {
                    "type": "number",
                    "format": "float",
                    "example": "2000.0"
                  },
                  "salary": {
                    "type": "number",
                    "format": "float",
                    "example": "3000.0"
                  },
                  "username": {
                    "type": "string",
                    "example": "newUsername"
                  }
                }
              }
            }
          },
          "required": "true"
        },
        "responses": {
          "200": {
            "description": "The user with its updated properties",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Envelope"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/409409UsernameConflict"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "envelopeId": {
        "in": "path",
        "name": "envelopeId",
        "schema": {
          "$ref": "#/components/schemas/EntityId"
        }
      },
      "transactionId": {
        "in": "path",
        "name": "envelopeId",
        "schema": {
          "$ref": "#/components/schemas/EntityId"
        }
      }
    },
    "responses": {
      "400BadRequest": {
        "description": "Request body invalid. Using a string for a parameter that accepts a number for example or a property is missing",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "errors": [
                {
                  "message": "Username is required"
                },
                {
                  "message": "A name is required to create the envelope"
                },
                {
                  "message": "current_amount is required and must be a float"
                }
              ]
            }
          }
        }
      },
      "401Unauthorized": {
        "description": "User is not authorized to access the resource",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "errors": [
                {
                  "message": "You are not authorized"
                }
              ]
            }
          }
        }
      },
      "403Forbbiden": {
        "description": "User is not allowed to access the requested resource. For example, an user trying to access an envelope that does not belong to them",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "errors": [
                {
                  "message": "You are not alloewd to access the resource of id 2"
                }
              ]
            }
          }
        }
      },
      "404NotFound": {
        "description": "The requested resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "errors": [
                {
                  "message": "The envelope with id 3 was not found"
                }
              ]
            }
          }
        }
      },
      "409UsernameConflict": {
        "description": "Username is already in use",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "errors": [
                {
                  "message": "Username already taken. Try another."
                }
              ]
            }
          }
        }
      },
      "500InternalServerError": {
        "description": "An internal server error occurred",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "errors": [
                {
                  "message": "Internal server error"
                }
              ]
            }
          }
        }
      }
    },
    "schemas": {
      "Envelope": {
        "required": ["id", "name", "user_id"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "current_amount": {
            "type": "number",
            "format": "float",
            "example": "532.6"
          },
          "envelope_limit": {
            "type": "number",
            "format": "float",
            "example": "700.0"
          },
          "name": {
            "type": "string",
            "example": "Groceries"
          },
          "user_id": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          }
        },
        "example": {
          "id": 1,
          "current_amount": "$440.00",
          "envelope_limit": "$600.00",
          "name": "Groceries",
          "user_id": 1
        }
      },
      "Transaction": {
        "required": ["id", "amount", "envelope_id", "user_id", "timestamp"],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "envelope_id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "user_id": {
            "$ref": "#/components/schemas/EntityId"
          },
          "timestamp": {
            "type": "string",
            "format": "datetime",
            "example": "2023-02-09T23:15:38.000Z"
          }
        },
        "example": {
          "id": 1,
          "amount": "$27.00",
          "timestamp": "2023-02-09T13:15:38.000Z",
          "envelope_id": 2
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "EntityId": {
        "type": "integer",
        "format": "int32",
        "example": "1"
      },
      "Amount": {
        "type": "number",
        "format": "float",
        "example": "532.6"
      },
      "Message": {
        "type": "object",
        "description": "Object message",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      }
    }
  }
}
